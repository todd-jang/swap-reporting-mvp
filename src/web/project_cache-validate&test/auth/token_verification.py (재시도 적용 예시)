# my_django_project/auth/token_verification.py (재시도 적용 예시)

import jwt
from jwk import PyJWKClient
from django.conf import settings
import logging
import requests # requests 예외 처리를 위해 필요
from tenacity import retry, stop_after_attempt, wait_exponential # tenacity 임포트

# 로거 설정
logger = logging.getLogger(__name__)

# --- JWK 클라이언트 설정 ---
jwk_client = None # 초기에는 None으로 설정

# 재시도 정책 정의
# 3번 시도 (최대 2번 재시도), 실패 시 2^x * 0.5 초 대기 (예: 0.5초, 1초, 2초...)
@retry(stop=stop_after_attempt(3), wait=wait_exponential(multiplier=0.5, min=0.5, max=10))
def initialize_jwk_client():
    """JWK 클라이언트를 초기화하고 JWKS를 가져오는 함수 (재시도 적용)."""
    jwks_url = getattr(settings, 'AUTH_JWKS_URL', None)
    if not jwks_url:
        logger.error("AUTH_JWKS_URL is not set in settings.")
        return None # URL 없으면 초기화 불가

    logger.info(f"Attempting to initialize JWK Client for URL: {jwks_url}")
    client = PyJWKClient(jwks_url)
    # 클라이언트 생성 시에는 실제 네트워크 통신이 일어나지 않을 수 있습니다.
    # get_signing_key_from_jwt 호출 시점에 통신이 일어납니다.
    # 하지만 초기화 자체에 문제가 있을 수도 있으니 try-except는 유지합니다.
    logger.info("JWK Client initialized successfully.")
    return client

# 애플리케이션 초기화 시 (모듈 로드 시) JWK 클라이언트 초기화 시도
try:
    # 재시도가 적용된 초기화 함수 호출
    jwk_client = initialize_jwk_client()
    if jwk_client is None:
        logger.error("Failed to initialize JWK client due to missing configuration.")

except Exception as e:
    logger.exception("Failed to initialize JWK client after multiple retries:")
    # 초기화에 최종 실패한 경우, 애플리케이션이 정상 작동하지 못하도록 처리 필요
    # 예: 중요한 오류로 간주하고 알림 발생 또는 애플리케이션 강제 종료 고려
    jwk_client = None


# --- ID 토큰 검증 및 관리자 권한 확인 함수 (재시도 고려) ---
# get_signing_key_from_jwt 호출 부분에 재시도 적용
@retry(stop=stop_after_attempt(3), wait=wait_exponential(multiplier=0.5, min=0.5, max=10))
def get_signing_key_with_retry(id_token: str):
    """서명 키를 가져오는 함수 (재시도 적용)."""
    if jwk_client is None:
         logger.error("JWK Client is not initialized.")
         raise Exception("Authentication service is not available.") # 클라이언트 초기화 실패 시 예외 발생

    try:
        # PyJWKClient가 내부적으로 JWKS 엔드포인트에 접근 시도
        signing_key = jwk_client.get_signing_key_from_jwt(id_token)
        logger.debug(f"Signing key obtained using kid: {signing_key.kid}")
        return signing_key
    except requests.exceptions.RequestException as e:
        # requests 라이브러리에서 발생하는 네트워크 관련 예외에 재시도 적용
        logger.warning(f"Network error while fetching signing key: {e}. Retrying...")
        raise # tenacity가 이 예외를 감지하고 재시도

    except Exception as e:
        # 네트워크 오류가 아닌 다른 예외는 재시도하지 않고 바로 실패
        logger.exception("Non-retryable error getting signing key:")
        raise # tenacity가 이 예외를 감지하면 재시도 없이 바로 실패

def verify_id_token_and_check_admin(id_token: str) -> dict:
    """
    ID 토큰을 검증하고, 유효한 경우 관리자 권한을 확인합니다.
    """
    if not id_token:
        logger.warning("ID Token is missing.")
        raise ValueError("ID Token is missing.")

    signing_key = None
    try:
        # 재시도 함수 호출
        signing_key = get_signing_key_with_retry(id_token)

    except Exception as e:
        logger.exception("Failed to get signing key after multiple retries:")
        # 재시도 후에도 최종 실패한 경우
        raise Exception("Failed to get signing key for ID token after multiple retries.") from e

    # --- 이후 jwt.decode 및 클레임 검증 로직은 동일 ---
    # ... (기존 verify_id_token_and_check_admin 함수의 나머지 코드) ...
    try:
        payload = jwt.decode(
           # ... (jwt.decode 인자) ...
        )
        # ... (관리자 클레임 확인) ...
        return payload # 성공 시

    except jwt.PyJWTError as e:
        logger.warning(f"JWT verification failed: {e} for token starting with {id_token[:10]}...")
        raise # JWT 관련 오류는 재시도 대상 아님
    except AdminPrivilegeRequiredError:
         logger.warning(f"Admin privilege required for user {payload.get('sub')}.") # payload가 정의되지 않았을 수도 있음, 주의
         raise
    except Exception as e:
        logger.exception(f"An unexpected error occurred during token verification (after getting key) for token starting with {id_token[:10]}...:")
        raise Exception(f"Token verification failed due to an unexpected error: {e}")
